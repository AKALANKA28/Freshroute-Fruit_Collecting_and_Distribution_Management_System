Below are backend codes.
Below are related to predictions.
Below is predictions.js model.

const mongoose = require("mongoose");

const PredictionSchema = new mongoose.Schema({
    fruit: {
        type: String,
        required: true
    },
    subCategory: {
        type: String,
        required: true
    },
    quality: {
        type: String,
        required: true
    },
    quantity: {
        type: Number,
        required: true
    },
    price: {
        type: String,
        required: true
    },
    dateCanBeGiven: {
        type: String,
        required: true
    },
    status: {
        type: String,
        enum: ['approved', 'pending', 'declined'],
        default: 'pending'
    }
});

const Prediction = mongoose.model("Prediction", PredictionSchema);

module.exports = Prediction;

Below is predictionController.js code.

const Prediction = require("../../models/farmers/predictions");
const AcceptedSupply = require("../../models/farmers/acceptedSupplies");

const addPrediction = async (req, res) => {
  const { fruit, subCategory, quality, quantity, price, dateCanBeGiven } = req.body;
  try {
    const newPrediction = await Prediction.create({ fruit, subCategory, quality, quantity, price, dateCanBeGiven });
    res.status(201).json(newPrediction); // Return the newly created prediction
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to add prediction" });
  }
};


const getAllPredictions = async (req, res) => {
  try {
    const predictions = await Prediction.find();
    res.json(predictions);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const getOnePrediction = async (req, res) => {
  const id = req.params.id;
  try {
    const prediction = await Prediction.findById(id);
    res.status(200).json(prediction);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const deletePrediction = async (req, res) => {
  const id = req.params.id;
  try {
    await Prediction.findByIdAndDelete(id);
    res.status(200).json({ message: "Supply Prediction Deleted" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const updatePrediction = async (req, res) => {
  const id = req.params.id;
  const { fruit, subCategory, quality, quantity, price, dateCanBeGiven } = req.body;
  try {
    await Prediction.findByIdAndUpdate(id, { fruit, subCategory, quality, quantity, price, dateCanBeGiven });
    res.status(200).json({ message: "Prediction updated" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const acceptPrediction = async (req, res) => {
  const id = req.params.id;
  try {
    const prediction = await Prediction.findByIdAndUpdate(id, { status: 'Approved' }, { new: true });
    if (!prediction) {
      return res.status(404).json({ message: "Prediction not found" });
    }
    res.status(200).json({ message: "Prediction Approved" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

const declinePrediction = async (req, res) => {
  const id = req.params.id;
  try {
    const prediction = await Prediction.findByIdAndUpdate(id, { status: 'Declined' }, { new: true });
    if (!prediction) {
      return res.status(404).json({ message: "Prediction not found" });
    }
    res.status(200).json({ message: "Prediction Declined" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  addPrediction,
  getAllPredictions,
  getOnePrediction,
  deletePrediction,
  updatePrediction,
  acceptPrediction,
  declinePrediction,
};

Below is predictionRoutes.js code.

router = require("express").Router();
const PredictionController = require("../../controllers/farmers/predictionController");

router.post("/add", PredictionController.addPrediction);
router.get("/", PredictionController.getAllPredictions);
router.get("/get/:id", PredictionController.getOnePrediction);
router.delete("/delete/:id", PredictionController.deletePrediction);
router.put("/update/:id", PredictionController.updatePrediction);
// Update the route for accepting a prediction request
router.put("/accept/:id", PredictionController.acceptPrediction);

// Update the route for declining a prediction request
router.put("/decline/:id", PredictionController.declinePrediction);

module.exports = router;

Below are related to approved supply requests.
Below is acceptedSupplies.js model.

mongoose = require("mongoose");

const AcceptedSupplySchema = new mongoose.Schema({
  
    fruit : {
        type : String,
        required: true
    },

    subCategory : {
        type : String,
        required: true
    },

    quality : {
        type : String,
        required: true
    },

    quantity : {
        type : Number,
        required: true
    },

    price : {
        type : String,
        required: true
    },

    dateCanBeGiven : {
        type : String,
        required: true
    },
});

const AcceptedSupply = mongoose.model("AcceptedSupply", AcceptedSupplySchema);

module.exports = AcceptedSupply;

Below is acceptedSuppliesController.js code.

const AcceptedSupply = require("../../models/farmers/acceptedSupplies");

const addAcceptedSupply = async (req, res) => {
  const { fruit, subCategory, quality, quantity, price, dateCanBeGiven } = req.body;
  try {
    const newAcceptedSupply = await AcceptedSupply.create({ fruit, subCategory, quality, quantity, price, dateCanBeGiven });
    res.json("New Supply Added");
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const getAllAcceptedSupplies = async (req, res) => {
  try {
    const acceptedSupplies = await AcceptedSupply.find();
    res.json(acceptedSupplies);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const getOneAcceptedSupply = async (req, res) => {
  const id = req.params.id;
  try {
    const acceptedSupply = await AcceptedSupply.findById(id);
    res.status(200).json(acceptedSupply);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const deleteAcceptedSupply = async (req, res) => {
  const id = req.params.id;
  try {
    await AcceptedSupply.findByIdAndDelete(id);
    res.status(200).json({ message: "Supply Deleted" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const updateAcceptedSupply = async (req, res) => {
  const id = req.params.id;
  const { fruit, subCategory, quality, quantity, price, dateCanBeGiven } = req.body;
  try {
    await AcceptedSupply.findByIdAndUpdate(id, { fruit, subCategory, quality, quantity, price, dateCanBeGiven });
    res.status(200).json({ message: "Supply updated" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

module.exports = {
  addAcceptedSupply,
  getAllAcceptedSupplies,
  getOneAcceptedSupply,
  deleteAcceptedSupply,
  updateAcceptedSupply,
};

Below is acceptedSuppliesRoutes.js code.

router = require("express").Router();
const AcceptedSupplyController = require("../../controllers/farmers/acceptedSuppliesController");

router.post("/add", AcceptedSupplyController.addAcceptedSupply);
router.get("/", AcceptedSupplyController.getAllAcceptedSupplies);
router.get("/get/:id", AcceptedSupplyController.getOneAcceptedSupply);
router.delete("/delete/:id", AcceptedSupplyController.deleteAcceptedSupply);
router.put("/update/:id", AcceptedSupplyController.updateAcceptedSupply);

module.exports = router;

Below are related to declined supply requests.
Below is declinedSupplies.js model.

mongoose = require("mongoose");

const DeclinedSupplySchema = new mongoose.Schema({
  
    fruit : {
        type : String,
        required: true
    },

    subCategory : {
        type : String,
        required: true
    },

    quality : {
        type : String,
        required: true
    },

    quantity : {
        type : Number,
        required: true
    },

    price : {
        type : String,
        required: true
    },

    dateCanBeGiven : {
        type : String,
        required: true
    },
});

const DeclinedSupply = mongoose.model("DeclinedSupply", DeclinedSupplySchema);

module.exports = DeclinedSupply;

Below is declinedSuppliesController.js code.

const DeclinedSupply = require("../../models/farmers/declinedSupplies");

const addDeclinedSupply = async (req, res) => {
  const { fruit, subCategory, quality, quantity, price, dateCanBeGiven } = req.body;
  try {
    const newDeclinedSupply = await DeclinedSupply.create({ fruit, subCategory, quality, quantity, price, dateCanBeGiven });
    res.json("Supply Declined");
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const getAllDeclinedSupplies = async (req, res) => {
  try {
    const declinedSupplies = await DeclinedSupply.find();
    res.json(declinedSupplies);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const getOneDeclinedSupply = async (req, res) => {
  const id = req.params.id;
  try {
    const declinedSupply = await DeclinedSupply.findById(id);
    res.status(200).json(declinedSupply);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const deleteDeclinedSupply = async (req, res) => {
  const id = req.params.id;
  try {
    await DeclinedSupply.findByIdAndDelete(id);
    res.status(200).json({ message: "Supply Deleted" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const updateDeclinedSupply = async (req, res) => {
  const id = req.params.id;
  const { fruit, subCategory, quality, quantity, price, dateCanBeGiven } = req.body;
  try {
    await DeclinedSupply.findByIdAndUpdate(id, { fruit, subCategory, quality, quantity, price, dateCanBeGiven });
    res.status(200).json({ message: "Supply updated" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

module.exports = {
  addDeclinedSupply,
  getAllDeclinedSupplies,
  getOneDeclinedSupply,
  deleteDeclinedSupply,
  updateDeclinedSupply,
};

Below is declinedSuppliesRoutes.js code.

router = require("express").Router();
const DeclinedSupplyController = require("../../controllers/farmers/declinedSuppliesController");

router.post("/add", DeclinedSupplyController.addDeclinedSupply);
router.get("/", DeclinedSupplyController.getAllDeclinedSupplies);
router.get("/get/:id", DeclinedSupplyController.getOneDeclinedSupply);
router.delete("/delete/:id", DeclinedSupplyController.deleteDeclinedSupply);
router.put("/update/:id", DeclinedSupplyController.updateDeclinedSupply);

module.exports = router;

Below is server.js code.

const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const cors = require("cors");

const dotenv = require("dotenv");

const app = express();
require("dotenv").config();

const salesRouter = require("./routes/finance/salesRoute");
const expenseRouter = require("./routes/finance/expenseRoute");
const FruitTypeRouter = require("./routes/coordinator/FruitTypeRoute.js");
const CategoryRouter = require("./routes/coordinator/CategoryRoute.js");
const SalaryRouter = require("./routes/coordinator/SalaryRoute.js");
const TransportFeeRouter = require("./routes/coordinator/TransportFeeRoute.js");
const cardsRouter = require("./routes/finance/cardsRoute.js");
const scheduleRouter = require("./routes/transport/scheduleRoute.js");
const vehicleRouter = require("./routes/transport/vehicleRoute.js");
const processRouter = require("./routes/transport/processRoute.js");
const coveringsRouter = require("./routes/transport/coveringsRoute.js");

//Heshan
const farmerRouter = require("./routes/farmers/farmerRoutes");
const predictionRouter = require("./routes/farmers/predictionRoutes");
const farmerJoiningRequestRouter = require("./routes/farmers/farmerJoiningRequestRoutes");
const acceptedSupplyRouter = require("./routes/farmers/acceptedSuppliesRoutes");
const declinedSupplyRouter = require("./routes/farmers/declinedSuppliesRoutes");

const PromotionRouter = require("./routes/r_and_p/PromotionRoute.js");
const CompaignRouter = require("./routes/r_and_p/CompaignRoute.js");
const ResourceRouter = require("./routes/r_and_p/ResourceRoute.js");


const itemRouter = require("./routes/buyers/Bmanager");
const EmployeeRouter = require("./routes/StaffManager/EmployeeRoute.js");
const CalculateSalaryRouter = require("./routes/StaffManager/CalculateSalaryRoute.js");
const NoticeRouter = require("./routes/StaffManager/NoticeRoute.js");

const orderMangerRoute = require("./routes/q_and_o/OrderManagerRoute");
const orderProcessorRoute = require("./routes/q_and_o/OrderProcessorRoute");

app.use(cors());
app.use(bodyParser.json());

// Connect to MongoDB
const URL = process.env.MONGODB_URL;

mongoose.connect(URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const connection = mongoose.connection;
connection.once("open", () => {
  console.log("MongoDB Connection Success!!!");
});

// Use the routes
app.use("/sales", salesRouter);
app.use("/expense", expenseRouter);
app.use("/cards", cardsRouter);
app.use("/FruitType", FruitTypeRouter);
app.use("/Category", CategoryRouter);
app.use("/Salary", SalaryRouter);

app.use('/schedule', scheduleRouter);
app.use('/vehicle', vehicleRouter);
app.use('/process', processRouter);
app.use('/coverings', coveringsRouter);

app.use("/Promotion", PromotionRouter);
app.use("/Compaign", CompaignRouter);
app.use("/Resource", ResourceRouter);



//Heshan
app.use("/Farmer", farmerRouter);
app.use("/Prediction", predictionRouter);
app.use("/farmerJoiningRequest", farmerJoiningRequestRouter);
app.use("/acceptedSupply", acceptedSupplyRouter);
app.use("/declinedSupply", declinedSupplyRouter);

app.use(itemRouter);

app.use("/Promotion", PromotionRouter);

app.use("/TransportFee", TransportFeeRouter);
app.use("/Employee", EmployeeRouter);
app.use("/CalculateSalary", CalculateSalaryRouter);
app.use("/Notice", NoticeRouter);
app.use("/om", orderMangerRoute);
app.use("/op", orderProcessorRoute);

// Start the server
const PORT = process.env.PORT || 8070;
app.listen(PORT, () => {
  console.log("\nDatabase Connected 😌");

  console.log(`Server is up and running on port: ${PORT}`);
});

Below are frontend codes.

Below is PredictionsList.jsx code.

import React, { useEffect, useState } from "react";
import axios from "axios";
import { PDFViewer } from "@react-pdf/renderer";
import { Button, Modal } from "react-bootstrap";
import Excel from "../../../../assests/img/icons/excel.png";
import Pdf from "../../../../assests/img/icons/pdf.png";
import Refresh from "../../../../assests/img/icons/refresh.png";
import SearchBar from './SearchBar';
import * as XLSX from "xlsx";
import { writeFile } from "xlsx";
import PredictionForm from "./PredictionForm";
import PredictionReport from "./PredictionReport";
import './predictions.css';

axios.defaults.baseURL = "http://localhost:8070/";

function PredictionsList() {
  const [addModalOpen, setAddModalOpen] = useState(false);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [dataList, setDataList] = useState([]);
  const [selectedPrediction, setSelectedPrediction] = useState(null);
  const [filteredDataList, setFilteredDataList] = useState([]); 
  const [searchAttribute, setSearchAttribute] = useState('fruit'); // Initialize with 'fruit'

  useEffect(() => {
    getFetchData();
  }, []);

  useEffect(() => {
    setFilteredDataList(dataList); // Initialize filteredDataList with dataList
  }, [dataList]);

  const getFetchData = async () => {
    try {
      const response = await axios.get("/Prediction/");
      setDataList(response.data);
    } catch (err) {
      alert(err.message);
    }
  };

  const handleRefreshClick = () => {
    window.location.reload();
  };

  const generateExcelFile = () => {
    // Rearrange the order of properties for each prediction object
    const rearrangedDataList = dataList.map(prediction => ({
      fruit: prediction.fruit,
      subCategory: prediction.subCategory,
      quality: prediction.quality,
      quantity: prediction.quantity,
      price: prediction.price,
      dateCanBeGiven: prediction.dateCanBeGiven
    }));
  
    // Define the worksheet
    const ws = XLSX.utils.json_to_sheet(rearrangedDataList);
    
    // Define the workbook
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Predictions Report");
    
    // Generate the Excel file
    writeFile(wb, "predictions_report.xlsx");
  };
  
  const handleButtonClick = () => {
    getFetchData(); // Fetch the latest data if needed
    generateExcelFile();
  };

  const handleAddModalOpen = () => {
    setAddModalOpen(true);
  };

  const handleAddModalClose = () => {
    setAddModalOpen(false);
  };

  const handleEditModalOpen = (prediction) => {
    setSelectedPrediction(prediction);
    setEditModalOpen(true);
  };

  const handleEditModalClose = () => {
    setEditModalOpen(false);
  };

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm("Are you sure you want to delete this prediction?");
    if (confirmDelete) {
      try {
        await axios.delete(`/Prediction/delete/${id}`);
        alert("Successfully Deleted");
        getFetchData();
      } catch (err) {
        alert(err.message);
      }
    }
  };

  const handleAddSubmit = async (formData) => {
    try {
      await axios.post("/Prediction/add", formData);
      alert("Prediction Added");
      window.location.reload();
      handleAddModalClose();
      getFetchData();
    } catch (err) {
      alert(err.message);
    }
  };

  const handleEditSubmit = async (formData) => {
    try {
      await axios.put(`/Prediction/update/${formData._id}`, formData);
      alert("Prediction Updated");
      handleEditModalClose();
      getFetchData();
    } catch (err) {
      alert(err.message);
    }
  };

  // Search functionality
  const handleSearch = (query) => {
    const filteredList = dataList.filter((prediction) => {
      // Check the selected search attribute and filter accordingly
      switch (searchAttribute) {
        case 'fruit':
          const fruit = `${prediction.fruit} ${prediction.subCategory}`;
          return fruit.toLowerCase().includes(query.toLowerCase());
        case 'quality':
          return prediction.quality.toLowerCase().includes(query.toLowerCase());
        default:
          return false;
      }
    });
    setFilteredDataList(filteredList);
  };

  // Function to handle search attribute change
  const handleSearchAttributeChange = (event) => {
    setSearchAttribute(event.target.value);
  };

  // Helper function to format status text
const formatStatus = (status) => {
  switch (status) {
    case 'approved':
      return 'Approved';
    case 'declined':
      return 'Declined';
    case 'pending':
      return 'Pending';
    default:
      return status;
  }
};

// Helper function to get the CSS class name based on status
const getStatusClassName = (status) => {
  switch (status.toLowerCase()) {
    case 'approved':
      return 'approved';
    case 'declined':
      return 'declined';
    case 'pending':
      return 'pending';
    default:
      return '';
  }
};

  const [showReportModal, setShowReportModal] = useState(false);
  const handleCloseReportModal = () => setShowReportModal(false);
  const handleShowReportModal = () => setShowReportModal(true);

  return (
    <div  id="main col-8">
      <div className="card recent-sales overflow-auto">
        <div className="card-body">
          <div className="page-header">
            <div class="add-item d-flex">
              <div class="card-title">
              Prediction Details
                <h6>Manage Prediction Details</h6>
              </div>
            </div>
            <ul class="table-top-head" style={{ float: "right" }}>
              <li>
                <div className="button-container">
                  <a onClick={handleShowReportModal}>
                    <img src={Pdf} alt="Pdf Icon" className="icon" />
                  </a>
                </div>
              </li>
              <li>
                <div className="button-container">
                  <a onClick={handleButtonClick}>
                    <img src={Excel} alt="Excel Icon" className="icon" />
                  </a>
                </div>
              </li>
              <li>
                <div className="button-container">
                  <a onClick={handleRefreshClick}>
                    <img src={Refresh} alt="Refresh Icon" className="icon" />
                  </a>
                </div>
              </li>
              <li>
                <div class="page-btn">
                  <button
                    type="button"
                    className="btn btn-added"
                    onClick={handleAddModalOpen}
                  >
                    <i className="bi bi-plus-circle"></i> Add Supply Prediction
                  </button>
                </div>
              </li>
            </ul>
            <Modal show={showReportModal} onHide={handleCloseReportModal}>
              <Modal.Header closeButton>
                <Modal.Title>Prediction Details Report</Modal.Title>
              </Modal.Header>
              <Modal.Body>
                <PDFViewer width="100%" height="500px">
                  <PredictionReport dataList={dataList} />
                </PDFViewer>
              </Modal.Body>
              <Modal.Footer>
                <Button variant="secondary" onClick={handleCloseReportModal}>
                  Close
                </Button>
              </Modal.Footer>
            </Modal>
          </div>

          <Modal show={addModalOpen} onHide={handleAddModalClose}>
            <Modal.Header closeButton>
              <Modal.Title>Add Supply Prediction</Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <PredictionForm handleSubmit={handleAddSubmit} />
            </Modal.Body>
          </Modal>

          <Modal show={editModalOpen} onHide={handleEditModalClose}>
            <Modal.Header closeButton>
              <Modal.Title>Edit Supply Prediction</Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <PredictionForm
                handleSubmit={handleEditSubmit}
                initialData={selectedPrediction}
              />
            </Modal.Body>
          </Modal>

          <div className="table-container">
            <SearchBar
              onSearch={handleSearch}
              searchAttribute={searchAttribute}
              onSearchAttributeChange={handleSearchAttributeChange}
            />
            <table className="table table-borderless datatable">
              <thead className="table-light">
                <tr>
                  <th scope="col">Fruit</th>
                  <th scope="col">Sub Category</th>
                  <th scope="col">Quality</th>
                  <th scope="col">Quantity</th>
                  <th scope="col">Price</th>
                  <th scope="col">Date Can Be Given</th>
                  <th scope="col">Status</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
              {filteredDataList.length ? (
                filteredDataList.map((prediction) => (
                  <tr key={prediction._id}>
                    <td>{prediction.fruit}</td>
                    <td>{prediction.subCategory}</td>
                    <td>{prediction.quality}</td>
                    <td>{prediction.quantity}</td>
                    <td>{prediction.price}</td>
                    <td>{prediction.dateCanBeGiven}</td>
                    <td>
                      <div
                        className={`status-box ${getStatusClassName(prediction.status)}`}
                      >
                        {formatStatus(prediction.status)}
                      </div>
                    </td>
                    <td className="action">
                      <div className="buttons">
                        <button
                          className="btn btn-edit"
                          onClick={() => handleEditModalOpen(prediction)}
                        >
                          <i className="bi bi-pencil-square"></i>
                        </button>
                        <button
                          className="btn btn-delete"
                          onClick={() => handleDelete(prediction._id)}
                        >
                          <i className="bi bi-trash-fill"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="6">No Data</td>
                </tr>
              )}

              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}

export default PredictionsList;

Below is SupplyRequestsList.jsx code.

import React, { useEffect, useState } from "react";
import axios from "axios";
import { Button, Modal } from "react-bootstrap";
import './supplyRequests.css';
import ApprovedSupplies from "./ApprovedSupplies";
import DeclinedSupplies from "./DeclinedSupplies";

axios.defaults.baseURL = "http://localhost:8070/";

function SupplyRequestsList() {
  const [supplyRequests, setSupplyRequests] = useState([]);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [declineModalShow, setDeclineModalShow] = useState(false);
  const [approvedSupplies, setApprovedSupplies] = useState([]);
  const [declinedSupplies, setDeclinedSupplies] = useState([]);

  useEffect(() => {
    fetchSupplyRequests();
    fetchApprovedSupplies();
    fetchDeclinedSupplies();
  }, []);

  const fetchSupplyRequests = async () => {
    try {
      const response = await axios.get("/Prediction");
      setSupplyRequests(response.data);
    } catch (error) {
      console.error("Error fetching supply requests:", error);
    }
  };

  const fetchApprovedSupplies = async () => {
    try {
      const response = await axios.get("/acceptedSupply");
      setApprovedSupplies(response.data);
    } catch (error) {
      console.error("Error fetching approved supplies:", error);
    }
  };

  const fetchDeclinedSupplies = async () => {
    try {
      const response = await axios.get("/declinedSupply");
      setDeclinedSupplies(response.data);
    } catch (error) {
      console.error("Error fetching declined supplies:", error);
    }
  };

  const handleAcceptRequest = async () => {
    if (!selectedRequest) return;
    try {
      await axios.put(`/Prediction/accept/${selectedRequest._id}`);
      await axios.post('/acceptedSupply/add', selectedRequest);
      fetchSupplyRequests();
      handleCloseModal();
      alert("Supply Added");
    } catch (error) {
      console.error("Error accepting request:", error);
    }
  };

  const handleDeclineRequest = async () => {
    if (!selectedRequest) return;
    try {
      await axios.put(`/Prediction/decline/${selectedRequest._id}`);
      await axios.post('/declinedSupply/add', selectedRequest);
      fetchSupplyRequests();
      handleCloseDeclineModal();
      alert("Request Declined");
    } catch (error) {
      console.error("Error declining request:", error);
    }
  };

  const handleShowModal = (request) => {
    setSelectedRequest(request);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setSelectedRequest(null);
    setShowModal(false);
  };

  const handleShowDeclineModal = (request) => {
    setSelectedRequest(request);
    setDeclineModalShow(true);
  };
  
  const handleCloseDeclineModal = () => {
    setSelectedRequest(null);
    setDeclineModalShow(false);
  };

  return (
    <div id="main col-8">
      <div className="card recent-sales overflow-auto">
        <div className="card-body">
          <div className="page-header">
            <div className="add-item d-flex">
              <div className="card-title">
                Supply Requests
                <h6>Manage Supply Requests</h6>
              </div>
            </div>
          </div>

          <div className="table-container">
          <table className="table datatable">
              <thead className="table-light">
                <tr>
                  <th scope="col">Fruit</th>
                  <th scope="col">Sub Category</th>
                  <th scope="col">Quality</th>
                  <th scope="col">Quantity</th>
                  <th scope="col">Price</th>
                  <th scope="col">Date Can Be Given</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
              {supplyRequests.map((request) => (
                <tr key={request._id}>
                  <td>{request.fruit}</td>
                  <td>{request.subCategory}</td>
                  <td>{request.quality}</td>
                  <td>{request.quantity}</td>
                  <td>{request.price}</td>
                  <td>{request.dateCanBeGiven}</td>
                  <td>
                    <Button
                      className="btn-action btn-approve"
                      variant="success"
                      onClick={() => handleShowModal(request)}
                    >
                      Approve
                    </Button>
                    <button
                      className="btn btn-action btn-danger"
                      onClick={() => handleShowDeclineModal(request)}
                    >
                      Decline
                    </button>
                  </td>
                </tr>
              ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>Approve Request</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          Are you sure you want to approve this request?
        </Modal.Body>
        <Modal.Footer>
          <Button variant="" onClick={handleCloseModal}>
            Cancel
          </Button>
          <Button variant="success" onClick={handleAcceptRequest}>
            Approve
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={declineModalShow} onHide={handleCloseDeclineModal}>
        <Modal.Header closeButton>
          <Modal.Title>Decline Request</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          Are you sure you want to decline this request?
        </Modal.Body>
        <Modal.Footer>
          <Button variant="" onClick={handleCloseDeclineModal}>
            Cancel
          </Button>
          <Button variant="danger" onClick={handleDeclineRequest}>
            Decline
          </Button>
        </Modal.Footer>
      </Modal>

      <ApprovedSupplies approvedSupplies={approvedSupplies} setApprovedSupplies={setApprovedSupplies} />
      <DeclinedSupplies declinedSupplies={declinedSupplies} />
    </div>
  );
}

export default SupplyRequestsList;

Below is ApprovedSupplies.jsx code.


import React, { useEffect, useState } from "react";
import axios from 'axios';
import { Button, Modal } from "react-bootstrap";

axios.defaults.baseURL = "http://localhost:8070/";

function ApprovedSupplies({ approvedSupplies, setApprovedSupplies }) {

  const [supplyRequests, setSupplyRequests] = useState([]);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [declineModalShow, setDeclineModalShow] = useState(false);

  useEffect(() => {
    fetchSupplyRequests();
  }, []);

  

  const fetchSupplyRequests = async () => {
    try {
      const response = await axios.get("/Prediction");
      setSupplyRequests(response.data);
    } catch (error) {
      console.error("Error fetching supply requests:", error);
    }
  };

  const handleDecline = async (id) => {
    try {
      // Delete the request data from the "acceptedSupplies" collection
      await axios.delete(`/acceptedSupply/delete/${id}`);

      // Add the request data to the "declinedSupplies" collection
      await axios.post('/declinedSupply/add', approvedSupplies.find(supply => supply._id === id));

      // Update the status column in the related prediction request
      await axios.put(`/Prediction/decline/${id}`);

      // Remove the declined supply from the local state
      setApprovedSupplies(approvedSupplies.filter(supply => supply._id !== id));

      alert("Request Declined");
    } catch (error) {
      console.error("Error declining request:", error);
    }
  };

  const handleShowDeclineModal = (request) => {
    setSelectedRequest(request);
    setDeclineModalShow(true);
  };
  
  const handleCloseDeclineModal = () => {
    setSelectedRequest(null);
    setDeclineModalShow(false);
  };

  return (
    <div id="main col-8">
      <div className="card recent-sales overflow-auto">
        <div className="card-body">
          <div className="page-header">
            <div className="add-item d-flex">
              <div className="card-title">
                Approved Supply Requests
              </div>
            </div>
          </div>

          <div className="table-container">
            <table className="table datatable">
              <thead className="table-light">
                <tr>
                  <th>Fruit</th>
                  <th>Sub Category</th>
                  <th>Quality</th>
                  <th>Quantity</th>
                  <th>Price</th>
                  <th>Date Can Be Given</th>
                  <th>Action</th> {/* New column for action */}
                </tr>
              </thead>
              <tbody>
                {approvedSupplies.map((request) => (
                  <tr key={request._id}>
                    <td>{request.fruit}</td>
                    <td>{request.subCategory}</td>
                    <td>{request.quality}</td>
                    <td>{request.quantity}</td>
                    <td>{request.price}</td>
                    <td>{request.dateCanBeGiven}</td>
                    <td>
                      <button
                        className="btn btn-action btn-danger"
                        onClick={() => handleDecline(request._id)} // Call handleDecline with the request ID
                      >
                        Decline
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <Modal show={declineModalShow} onHide={handleCloseDeclineModal}>
        <Modal.Header closeButton>
          <Modal.Title>Decline Request</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          Are you sure you want to decline this request?
        </Modal.Body>
        <Modal.Footer>
          <Button variant="" onClick={handleCloseDeclineModal}>
            Cancel
          </Button>
          <Button variant="danger">
            Decline
          </Button>
        </Modal.Footer>
      </Modal>

    </div>
  );
}

export default ApprovedSupplies;




